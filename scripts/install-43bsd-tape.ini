do %~p0setvars.ini %1

set env DIST_DIR %ROOT_DIR%4.3BSD-dist/
set env DIST_TAP %DIST_DIR%4.3BSD-dist.tap

do %MACHINE_DIR%%MACHINE%.ini

attach -qr %INSTALL_TAPE_SIMH_DEV% %DIST_TAP%

set cpu idle=4.3bsd

reset -p all

do %SCRIPT_DIR%%INSTALL_TAPE_UNIX_DEV%-tape-bootstrap.ini

echof "\n\n\n---------------- Starting... ----------------\n\n\n"

if ("%INSTALL_DISK_UNIX_DEV%" != "hp" && "%INSTALL_DISK_UNIX_DEV%" != "up") goto FORMAT_DONE

# "format" the disk if hp or up
# this is really just for fun to see the code run
expect -r "=" send "format\r"; c
expect -r "\rEnable debugging" send "0\n"; c
# hp(0,0)
expect -r "\rDevice to format" send "%INSTALL_DISK_UNIX_DEV%(%INSTALL_DISK_UNIX_NUM%,0)\n"; c
expect -r "\rFormatting drive" send "yes\n"; c
expect -r "\rStarting cylinder" send "\n"; c
expect -r "\rStarting track" send "\n"; c 
expect -r "\rEnding cylinder" send "\n"; c
expect -r "\rEnding track" send "\n"; c
expect -r "\rPattern" send "2\n"; c
expect -r "\rMaximum" send "\n"; c
expect -r "\rDone"

continue

:FORMAT_DONE

# "copy" the mini-root to swap hp(0,1)
expect -r "=" send "copy\r"; c
# ht(8,1)
expect -r "\nFrom:" send "%INSTALL_TAPE_UNIX_DEV%(%INSTALL_TAPE_UNIX_NUM%,1)\n"; c
# hp(0,1)
expect -r "\rTo:" send "%INSTALL_DISK_UNIX_DEV%(%INSTALL_DISK_UNIX_NUM%,1)\n"; c
expect -r "205 records copied"

continue

# "boot" from mini-root in swap
expect -r "\r=" send "boot\r"; c
# hp(0,1)vmunix
expect -r "\r:" send "%INSTALL_DISK_UNIX_DEV%(%INSTALL_DISK_UNIX_NUM%,1)vmunix\n"; c
# hp0* (note: special odd syntax here to indicate booting from swap)
expect -r "\rroot device\?" send "%INSTALL_DISK_UNIX_DEV%%INSTALL_DISK_UNIX_NUM%*\n"; c
expect -r "CHECK AND RESET THE DATE"

continue

# copy real root filesystem onto hp(0,0)
expect -r "\n#" send "disk=%INSTALL_DISK_UNIX_DEV%%INSTALL_DISK_UNIX_NUM% type=%INSTALL_DISK_TYPE% tape=%INSTALL_TAPE_UNIX_DEV% xtr\n"; c
#expect -r "\n#" send "mt -f /dev/%INSTALL_TAPE_UNIX_DEV%0 rew\n"; c
expect -r "\n#" send "sync; sync\n"

continue

# reboot (still using tape for boot loader)

# rewind (better way?)
attach -qr %INSTALL_TAPE_SIMH_DEV% %DIST_TAP%

reset -p all

do %SCRIPT_DIR%%INSTALL_TAPE_UNIX_DEV%-tape-bootstrap.ini

echof "\n\n\n---------------- Restarting... ----------------\n\n\n"

# "boot" from real root
expect -r "=" send "boot\r"; c
# hp(0,0)vmunix
expect -r "\r:" send "%INSTALL_DISK_UNIX_DEV%(%INSTALL_DISK_UNIX_NUM%,0)vmunix\n"; c
# hp0
expect -r "\rroot device\?" send "%INSTALL_DISK_UNIX_DEV%%INSTALL_DISK_UNIX_NUM%\n"; c
# set date the hard way
# https://medium.com/perisur/took-me-1-hour-to-set-the-date-on-my-computer-bac8263711ec
expect -r "\n#" send "awk 'BEGIN{printf \"time/W0x%%x\\n\", %UTIME%; exit 0}' | adb -w vmunix /dev/kmem; date\n"

continue

# machine specific filesystem setup
do %MACHINE_DIR%%MACHINE%-setup-fs.ini

# unpack distribution archives
# /usr except src
expect "\n#" send "cd /usr\n"; c
expect "\n#" send "mt rew; mt fsf 3; tar xvpbf 20 /dev/rmt12; sync\n"; c
# /usr/src/sys
expect "\n#" send "mkdir /usr/src; mkdir /usr/src/sys; cd /usr/src/sys\n"; c
expect "\n#" send "mt fsf; tar xvpbf 20 /dev/rmt12; sync\n"; c
# /usr/src except sys
expect "\n#" send "cd /usr/src\n"; c
expect "\n#" send "mt fsf; tar xvpbf 20 /dev/rmt12; sync\n"; c
# /usr/lib/vfont
#expect "\n#" send "mkdir /usr/lib/vfont; cd /usr/lib/vfont\n"; c
#expect "\n#" send "mt fsf; tar xvpbf 20 /dev/rmt12; sync\n"; c
expect "\n#" send "mt fsf 2\n"; c
# /usr/src/new
expect "\n#" send "mkdir /usr/src/new; cd /usr/src/new\n"; c
expect "\n#" send "mt fsf; tar xvpbf 20 /dev/rmt12; sync\n"; c
# /usr/ingress
#expect "\n#" send "mkdir /usr/ingress; cd /usr/ingress\n"; c
#expect "\n#" send "mt fsf; tar xvpbf 20 /dev/rmt12\n"; c
expect "\n#" send "mt fsf 2\n"; c
# fsck
expect "\n#" send "cd /; sync; sync; umount -a\n"; c
expect "\n#" send "fsck -y\n"; c
expect "\n#" send "mount -a; df -i\n"

continue

# make floppy
set cs writeenabled
expect "\n#" send "cd /sys/floppy\n"; c
expect "\n#" send "cp defboo.hp defboo.cmd\n"; c
expect "\n#" send "make install\n"; c
expect "records out"; set cs locked
c

# 
expect "\n#" send "echo done!"; c
c
